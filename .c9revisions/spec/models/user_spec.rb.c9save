{"ts":1366209289604,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1366209305372,"patch":[[{"diffs":[[1,"require 'spec_helper'\r\n\r\ndescribe User do\r\n\r\n  before(:each) do\r\n    @attr = {\r\n      :name => \"Example User\",\r\n      :email => \"user@example.com\",\r\n      :password => \"changeme\",\r\n      :password_confirmation => \"changeme\"\r\n    }\r\n  end\r\n\r\n  it \"should create a new instance given a valid attribute\" do\r\n    User.create!(@attr)\r\n  end\r\n\r\n  it \"should require an email address\" do\r\n    no_email_user = User.new(@attr.merge(:email => \"\"))\r\n    no_email_user.should_not be_valid\r\n  end\r\n\r\n  it \"should accept valid email addresses\" do\r\n    addresses = %w[user@foo.com THE_USER@foo.bar.org first.last@foo.jp]\r\n    addresses.each do |address|\r\n      valid_email_user = User.new(@attr.merge(:email => address))\r\n      valid_email_user.should be_valid\r\n    end\r\n  end\r\n\r\n  it \"should reject invalid email addresses\" do\r\n    addresses = %w[user@foo,com user_at_foo.org example.user@foo.]\r\n    addresses.each do |address|\r\n      invalid_email_user = User.new(@attr.merge(:email => address))\r\n      invalid_email_user.should_not be_valid\r\n    end\r\n  end\r\n\r\n  it \"should reject duplicate email addresses\" do\r\n    User.create!(@attr)\r\n    user_with_duplicate_email = User.new(@attr)\r\n    user_with_duplicate_email.should_not be_valid\r\n  end\r\n\r\n  it \"should reject email addresses identical up to case\" do\r\n    upcased_email = @attr[:email].upcase\r\n    User.create!(@attr.merge(:email => upcased_email))\r\n    user_with_duplicate_email = User.new(@attr)\r\n    user_with_duplicate_email.should_not be_valid\r\n  end\r\n\r\n  describe \"passwords\" do\r\n\r\n    before(:each) do\r\n      @user = User.new(@attr)\r\n    end\r\n\r\n    it \"should have a password attribute\" do\r\n      @user.should respond_to(:password)\r\n    end\r\n\r\n    it \"should have a password confirmation attribute\" do\r\n      @user.should respond_to(:password_confirmation)\r\n    end\r\n  end\r\n\r\n  describe \"password validations\" do\r\n\r\n    it \"should require a password\" do\r\n      User.new(@attr.merge(:password => \"\", :password_confirmation => \"\")).\r\n        should_not be_valid\r\n    end\r\n\r\n    it \"should require a matching password confirmation\" do\r\n      User.new(@attr.merge(:password_confirmation => \"invalid\")).\r\n        should_not be_valid\r\n    end\r\n\r\n    it \"should reject short passwords\" do\r\n      short = \"a\" * 5\r\n      hash = @attr.merge(:password => short, :password_confirmation => short)\r\n      User.new(hash).should_not be_valid\r\n    end\r\n\r\n  end\r\n\r\n  describe \"password encryption\" do\r\n\r\n    before(:each) do\r\n      @user = User.create!(@attr)\r\n    end\r\n\r\n    it \"should have an encrypted password attribute\" do\r\n      @user.should respond_to(:encrypted_password)\r\n    end\r\n\r\n    it \"should set the encrypted password attribute\" do\r\n      @user.encrypted_password.should_not be_blank\r\n    end\r\n\r\n  end\r\n\r\nend"]],"start1":0,"start2":0,"length1":0,"length2":2756}]],"length":2756,"saved":false}
