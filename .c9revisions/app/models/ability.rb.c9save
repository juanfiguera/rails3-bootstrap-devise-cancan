{"ts":1366212984966,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class Ability\n  include CanCan::Ability\n\n  def initialize(user)\n    # Define abilities for the passed in user here. For example:\n    #\n    #   user ||= User.new # guest user (not logged in)\n    #   if user.admin?\n    #     can :manage, :all\n    #   else\n    #     can :read, :all\n    #   end\n    #\n    # The first argument to `can` is the action you are giving the user \n    # permission to do.\n    # If you pass :manage it will apply to every action. Other common actions\n    # here are :read, :create, :update and :destroy.\n    #\n    # The second argument is the resource the user can perform the action on. \n    # If you pass :all it will apply to every resource. Otherwise pass a Ruby\n    # class of the resource.\n    #\n    # The third argument is an optional hash of conditions to further filter the\n    # objects.\n    # For example, here the user can only update published articles.\n    #\n    #   can :update, Article, :published => true\n    #\n    # See the wiki for details:\n    # https://github.com/ryanb/cancan/wiki/Defining-Abilities\n  end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":1054}]],"length":1054}
{"contributors":[],"silentsave":false,"ts":1366213011596,"patch":[[{"diffs":[[0,"   #\n   "],[-1," #"],[0,"   user "]],"start1":130,"start2":130,"length1":18,"length2":16},{"diffs":[[0," in)\n   "],[-1," #"],[0,"   if us"]],"start1":183,"start2":183,"length1":18,"length2":16},{"diffs":[[0,"r.admin?\n   "],[-1," #"],[0,"     can :ma"]],"start1":200,"start2":200,"length1":26,"length2":24},{"diffs":[[0,"\n   "],[-1," #   else\n    #     can :read, :all\n    #"],[0,"   e"]],"start1":234,"start2":234,"length1":49,"length2":8}]],"length":1007,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366231576202,"patch":[[{"diffs":[[0," Ability"],[1,"\r"],[0,"\n  inclu"]],"start1":5,"start2":5,"length1":16,"length2":17},{"diffs":[[0,":Ability"],[-1,"\n"],[1,"\r\n\r"],[0,"\n  def i"]],"start1":32,"start2":32,"length1":17,"length2":19},{"diffs":[[0,"ser)"],[1,"\r"],[0,"\n"],[-1,"    # Define abilities for the passed in user here. For example:\n    #\n  "],[0,"    "]],"start1":62,"start2":62,"length1":82,"length2":10},{"diffs":[[0,"gged in)"],[1,"\r"],[0,"\n"],[-1,"  "],[0,"    if u"]],"start1":110,"start2":110,"length1":19,"length2":18},{"diffs":[[0,"ser."],[-1,"admin?\n        can :manage, :all\n      end\n    #\n    # The first argument to `can` is the action you are giving the user \n    # permission to do.\n    # If you pass :manage it will apply to every action. Other common actions\n    # here are :read, :create, :update "],[1,"has_role? :admin\r\n      c"],[0,"an"],[-1,"d"],[0," :"],[-1,"destroy.\n    #\n    # The second argument is the resource the user can perform the action on. \n    # If you pass :all it will apply to every resource. Otherwise pass a Ruby\n    # class of the resource.\n    #\n    # The third argument is an optional hash of conditions to further filter the\n    # objects.\n    # For example, here the user can only update published articles.\n    #\n    #   can :update, Article, :published => true\n    #\n    # See the wiki for details:\n    # https://github.com/ryanb/cancan/wiki/Defining-Abilities\n  end"],[1,"manage, :all\r\n    end\r\n  end\r\n\r"],[0,"\nend"],[-1,"\n"]],"start1":128,"start2":128,"length1":809,"length2":68}]],"length":196,"saved":false}
